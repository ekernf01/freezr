{
    "collab_server" : "",
    "contents" : "# freezr runs scripts and freezes copies along with the results generated.\n\n#' Run an analysis while freezing a copy of the code (and perhaps dependencies) for later perusal.\n#'\n#' @param analyses_to_run R or R markdown files to be run and frozen.\n#' @param destination Where to save the code (and log, and maybe dependencies)\n#' @param run_from_cryo_storage If \\code{FALSE} (default), runs the code from the current working directory.\n#' If \\code{TRUE}, runs from \\code{destination} (or a folder within it -- see param \\code{timestamp_as_folder}).\n#' The default option makes it easy to find files your code depends on, but hard to put your own\n#' output files in \\code{destination}. The non-default option has the opposite properties and tends to\n#' break code unless it uses absolute paths throughout.\n#' @param dependencies A list of file paths to extra files your analysis uses.\n#' They will get saved to destination if they are smaller than \\code{copy_deps_kb_limit.}\n#' @param seed_to_set seed for rng. If \\code{NULL} (default), seed doesn't get set.\n#' @param timestamp_as_folder If \\code{TRUE} (default), one extra folder is added to \\code{destination}\n#' based on the current time and date (down to the second). If \\code{FALSE}, code gets saved to \\code{destination}.\n#' @param force If \\code{FALSE}, refuses to continue when \\code{destination} is not empty.\n#' If \\code{TRUE}, continues saving results even to non-empty \\code{destination}. Default is \\code{FALSE}.\n#' @param copy_deps_kb_limit \\code{dependencies} get saved to \\code{destination} if they are\n#' smaller than \\code{copy_deps_kb_limit}.\n#' @param purl_aggressively If \\code{TRUE} (default), then when purling Rmd files, the\n#' corresponding R files may be overwritten.\n#' @param chastize If \\code{TRUE} (default), creates a \\code{notes.txt} file for you and nags\n#' you about filling it.\n#' @param notes_file Name of file to be created while \\code{chastize}ing.\n#' @return \\code{NULL} return value.\n#' @examples\n#' setwd( file.path( \"~\", \"my_project\" ) )\n#' freeze(analyses_to_run = c( \"my_functions.Rmd\", \"my_script.R\" ),\n#'        destination = file.path(\"~\", \"my_project\", \"results\") )\nfreeze = function( analyses_to_run,\n                   destination,\n                   run_from_cryo_storage = F,\n                   dependencies = NULL,\n                   seed_to_set = NULL,\n                   timestamp_as_folder = T,\n                   force = F,\n                   copy_deps_kb_limit = 100,\n                   purl_aggressively = T,\n                   chastise = T,\n                   notes_file = \"notes.md\" ){\n\n  # # Nag user about leaving themselves notes.\n  notes_file = file.path( destination, \"notes.md\" )\n  if( chastise ){\n    if( !file.exists( notes_file ) ){\n      cat( paste( \"I noticed there was no file called notes.txt in your destination folder.\\n\",\n                  \"I'll make one so you can leave your future self some notes.\\n\",\n                  \"If you want me to shut up about this, put `chastise=F`.\\n\") )\n      file.create( file.path( destination, \"notes.txt\" ) )\n    } else {\n      notes_length = nchar( paste( trimws( readLines( notes_file ) ), collapse = \"\" ) )\n      if( notes_length <= 50 ){\n        cat(\"Your notes.txt file has\", notes_length, \"non-whitespace character(s). \\n\")\n        cat(\"Fine, I mean, whatever. It's your research, not mine... \\n\")\n      } else {\n        cat(\"I see you have a notes.txt file with\", notes_length, \"non-whitespace characters! \\n Keep up the good work! \\n\")\n      }\n    }\n  }\n\n  # # Prepare and announce destination\n  destination = file.path( destination, format( Sys.time(), \"%Y_%b_%d|%H_%M_%S\") )\n  dir.create( destination, recursive = T )\n  empty = ( 0 == length( list.files( destination, all.files = TRUE, include.dirs = TRUE, no.. = TRUE ) ) )\n  if( file.exists( destination ) && !empty && !force ){\n    browser()\n    warning( paste( \"freezr is quitting early because that folder already has something in it.\",\n                    \"Try setting `force=TRUE` or `timestamp_as_folder=TRUE`. \") )\n    return()\n  }\n  if( file.exists( destination ) && !empty && force ){\n    warning( paste( \"freezr is modifying a folder that already has something in it.\",\n                    \"If that makes you nervous, try setting `timestamp_as_folder=TRUE`. \") )\n    return()\n  }\n  graphics_out = file.path( destination, \"all_graphics_out.pdf\" )\n  cat( paste0( \"Saving analysis tools to `\", destination, \"`\\n with plots in `\", graphics_out, \"`.\\n\" ) )\n\n  # # run analyses and freeze them, capturing graphics and text.\n  if( !is.null( seed_to_set ) ) { set.seed( seed_to_set ) }\n  pdf( graphics_out )\n  {\n    outfile = file.path( destination, \"freezer_output.txt\" )\n    file.create( outfile )\n    sink( file = outfile )\n    {\n      for( analysis_i in analyses_to_run ){\n        frozen_analysis_i = file.path( destination, analysis_i )\n        file.copy( from = analysis_i, to = frozen_analysis_i )\n        if( run_from_cryo_storage ){\n          old_wd = getwd()\n          setwd( destination )\n          run_r_or_rmd( frozen_analysis_i )\n          setwd( old_wd )\n        } else {\n          run_r_or_rmd( frozen_analysis_i )\n        }\n      }\n    }\n    sink()\n  }\n  dev.off()\n\n  # # copy dependencies\n  if( !is.null( dependencies) )\n  {\n    deps = data.frame( name = unlist( lapply( dependencies, basename ) ),\n                       saved = rep( F, length( dependencies ) ),\n                       size_kb = unlist( lapply( dependencies, file.size ) ) / 1000,\n                       full_path = dependencies,\n                       stringsAsFactors = F)\n    for( ii in seq_along( deps$name ) ){\n      if( deps$size_kb[[ii]] < copy_deps_kb_limit ){\n        suppressWarnings( dir.create( file.path( destination, \"dependencies\" ), recursive = T ) )\n        file.copy( from = deps$full_path[[ii]],\n                   to = file.path( destination, \"dependencies\", deps$name[[ii]] ),\n                   )\n        deps$saved[ii] = T\n      } else {\n        if( missing( copy_deps_kb_limit ) ){\n          warning( paste0( \"By default, freeze assumes you only want to save files below\",\n                           copy_deps_kb_limit,\n                           \"kb. To change this, use e.g. `copy_deps_kb_limit=Inf`. \" ) )\n        }\n      }\n    }\n  } else {\n    deps = NULL\n  }\n\n  # # Make a nice happy log file\n  logfile = file.path( destination, \"freezer_log.txt\" )\n  file.create( logfile )\n  sink( file = logfile )\n  {\n    cat(paste(\"freezr was called from `\", getwd(),  \"` .\\n\"))\n    cat(paste(\"There were\", length(analyses_to_run), \"files to be sourced, in this order:\\n\"))\n    cat( paste( analyses_to_run, collapse = \"\\n\" ))\n    cat( \"\\nThe destination was `\", destination, \"`.\\n\" )\n    cat( \"Any text sent to the console were diverted to `\", outfile, \"`.\\n\" )\n    cat( \"Any graphics sent to the interactive graphics window were diverted to `\", graphics_out, \"`.\\n\" )\n    if(!is.null(deps)){\n      cat( \"Dependencies were saved if below\", copy_deps_kb_limit, \"kb.\\n\" )\n      write.table( deps, row.names = F, quote = F, sep = \"\\t\" )\n    }\n    if(!is.null(seed_to_set)){\n      cat( \"The seed was set as `\", seed_to_set, \"`.\" )\n    }\n    cat( \"If you enjoyed using freezr, please write your future self some nice notes!\\n\" )\n  }\n  sink()\n  return()\n}\n\n\n#' \\code{source} code from an R or Rmarkdown file.\n#'\n#' @param file_name An RMarkdown file or an R file to be (\\code{purl}ed and) run.\n#' The file gets run **from the directory it is in**, not from \\code{getwd()}.\n#' @return Name of input possibly with `.Rmd` changed to `.R`.\nrun_r_or_rmd = function( file_name ) {\n  name_ext = strsplit( x = file_name, split = \".\", fixed = T)[[1]]\n  ext = name_ext[ length( name_ext ) ]\n  name_dot_R = paste( c( name_ext[ -length( name_ext ) ], \"R\"), collapse = \".\" )\n  if( tolower( ext ) == \"r\" ) {\n    source( file_name )\n  } else if( tolower( ext ) == \"rmd\" ){\n    # Purl, source, and clean up\n    if( file.exists( name_dot_R ) && !purl_aggressively ){\n      stop( paste( \"freezr will not overwrite existing `.R` versions of `.Rmd`\",\n                   \"files since you set `purl_aggressively=FALSE`.\" ) )\n    }\n    knitr::purl( file_name, output = name_dot_R, quiet = T )\n    source( name_dot_R )\n    file.remove( name_dot_R )\n  } else {\n    stop(\"Can only handle `.R` and `.Rmd` files.\")\n  }\n  return( name_dot_R )\n}\n",
    "created" : 1484609232020.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1719876567",
    "id" : "BF00E487",
    "lastKnownWriteTime" : 1484611084,
    "last_content_update" : 1484611084294,
    "path" : "~/Desktop/software_projects/freezr/R/freezr_functions.R",
    "project_path" : "R/freezr_functions.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}